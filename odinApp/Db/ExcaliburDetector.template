# excaliburDetector.template

# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Timeout

# This associates the template with an edm screen
# % gui, $(PORT), edmtab, ExcaliburMain.edl, P=$(P),R=$(R)

include "ADBase.template"

###################################################################
#  Override the detector state                                    # 
###################################################################

record(mbbi, "$(P)$(R)DetectorState_RBV")
{
    field(TWST, "Calibrating")
    field(TWVL, "2")
    field(TWSV, "NO_ALARM")
}

# Number of frames taken in current acquisition.
#% archiver 1 monitor
record(longin, "$(P)$(R)ArrayCounter_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODI_status/frames_acquired")
}

# Number of frames taken in current acquisition.
#% archiver 1 monitor
record(ai, "$(P)$(R)ArrayRateRaw_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODD_status/frame_rate")
}

record(calc, "$(P)$(R)ArrayRate_RBV")
{
    field(INPA, "$(P)$(R)ArrayRateRaw_RBV NPP NMS")   # New rate value
    field(CALC, "A")
    field(PREC, "1" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

record(bo, "$(P)$(R)ReadStatus")
{
    field(SCAN, ".1 second")
}

# Operation mode.
# % autosave 2 
#% archiver 10 Monitor
record(mbbo, "$(P)$(R)OperationMode")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/operation_mode")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(ZRST, "Normal")
    field(ONST, "Burst")
    field(TWST, "Histogram")
    field(THST, "DAC Scan")
    field(FRST, "Matrix Read")
    field(PINI, "1")
}

# Operation mode read back.
record(mbbi, "$(P)$(R)OperationMode_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/operation_mode")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(ZRST, "Normal")
    field(ONST, "Burst")
    field(TWST, "Histogram")
    field(FRST, "Matrix Read")
    field(THST, "DAC Scan")
}

# Counter depth.  Actually part of the operation mode register but the FEM
# has to be in control of that.
# % autosave 2 
#% archiver 10 Monitor
record(mbbo, "$(P)$(R)CounterDepth")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/counter_depth")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(ZRST, "1 bit")
    field(ONST, "6 bit")
    field(TWST, "12 bit")
    field(THST, "24 bit")
    field(PINI, "1")
}

# Counter depth readback.  Actually part of the operation mode register but the FEM
# has to be in control of that.
record(mbbi, "$(P)$(R)CounterDepth_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/counter_depth")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(ZRST, "1 bit")
    field(ONST, "6 bit")
    field(TWST, "12 bit")
    field(THST, "24 bit")
}

# Counter Select.
# % autosave 2 
#% archiver 10 Monitor
record(mbbo, "$(P)$(R)CounterSelect")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_config/counter_select")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(ZRST, "A")
    field(ONST, "B")
    field(TWST, "A and B")
    field(PINI, "1")
}

# Counter select readback.
record(mbbi, "$(P)$(R)CounterSelect_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_config/counter_select")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(ZRST, "A")
    field(ONST, "B")
    field(TWST, "A and B")
}

# Energy threshold.
# % autosave 2 
#% archiver 10 Monitor
record(ao, "$(P)$(R)EnergyThreshold")
{
    field(SCAN, "Passive")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODD_config/energy_threshold")
    field(EGU,  "keV")
    field(PINI, "1")
}

# Energy threshold read back.
record(ai, "$(P)$(R)EnergyThreshold_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODD_config/energy_threshold")
    field(EGU,  "keV")
}

# Number of test pulses.
# % autosave 2 
#% archiver 10 Monitor
record(longout, "$(P)$(R)NumTestPulses")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_config/num_test_pulses")
    field(PINI, "1")
}

# Number of test pulses.
record(longin, "$(P)$(R)NumTestPulses_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_config/num_test_pulses")
}

# Read write mode.  Actually part of the operation mode register but the FEM
# has to be in control of that.
# % autosave 2 
#% archiver 10 Monitor
record(mbbo, "$(P)$(R)ReadWriteMode")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/read_write_mode")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "Sequential")
    field(ONST, "Continuous")
    field(PINI, "1")
}

# Read write mode.  Actually part of the operation mode register but the FEM
# has to be in control of that.
record(mbbi, "$(P)$(R)ReadWriteMode_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/read_write_mode")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "Sequential")
    field(ONST, "Continuous")
}

# Which discriminator in 24 bit mode.  Actually part of the operation mode register but the FEM
# has to be in control of that.
# % autosave 2 
#% archiver 10 Monitor
record(mbbo, "$(P)$(R)DiscCsmSpm")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/disc_csm_spm")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "DiscL")
    field(ONST, "DiscH")
    field(PINI, "1")
}

# Which discriminator in 24 bit mode.  Actually part of the operation mode register but the FEM
# has to be in control of that.
record(mbbi, "$(P)$(R)DiscCsmSpm_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/disc_csm_spm")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "DiscL")
    field(ONST, "DiscH")
}

# Equalization mode.  Actually part of the operation mode register but the FEM
# has to be in control of that.
# % autosave 2 
#% archiver 10 Monitor
record(mbbo, "$(P)$(R)EqualizationMode")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/equalization_mode")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "Off")
    field(ONST, "On")
    field(PINI, "1")
}

# Equalization mode.  Actually part of the operation mode register but the FEM
# has to be in control of that.
record(mbbi, "$(P)$(R)EqualizationMode_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/equalization_mode")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "Off")
    field(ONST, "On")
}

# CSM/SPM mode.  Actually part of the operation mode register but the FEM
# has to be in control of that.
# % autosave 2 
#% archiver 10 Monitor
record(mbbo, "$(P)$(R)CsmSpmMode")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/csm_spm_mode")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "Single Pixel")
    field(ONST, "Charge Sum")
    field(PINI, "1")
}

# CSM/SPM mode.  Actually part of the operation mode register but the FEM
# has to be in control of that.
record(mbbi, "$(P)$(R)CsmSpmMode_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/csm_spm_mode")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "Single Pixel")
    field(ONST, "Charge Sum")
}

# Gain mode.  Actually part of the operation mode register but the FEM
# has to be in control of that.
# % autosave 2 
#% archiver 10 Monitor
record(mbbo, "$(P)$(R)GainMode")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/gain_mode")
    field(ZRVL, "0")
    field(ONVL, "1")  # Previously 2
    field(TWVL, "2")  # Previously 1
    field(THVL, "3")
    field(ZRST, "Super High")
    field(ONST, "High")
    field(TWST, "Low")
    field(THST, "Super Low")
    field(PINI, "1")
}

# Gain mode.  Actually part of the operation mode register but the FEM
# has to be in control of that.
record(mbbi, "$(P)$(R)GainMode_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/gain_mode")
    field(ZRVL, "0")
    field(ONVL, "1")  # Previously 2
    field(TWVL, "2")  # Previously 1
    field(THVL, "3")
    field(ZRST, "Super High")
    field(ONST, "High")
    field(TWST, "Low")
    field(THST, "Super Low")
}

# Trigger polarity.  Actually part of the operation mode register but the FEM
# has to be in control of that.
# % autosave 2 
#% archiver 10 Monitor
record(mbbo, "$(P)$(R)TriggerPolarity")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/trigger_polarity")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "Electron")
    field(ONST, "Hole")
    field(PINI, "1")
}

# Trigger polarity.  Actually part of the operation mode register but the FEM
# has to be in control of that.
record(mbbi, "$(P)$(R)TriggerPolarity_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/trigger_polarity")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "Electron")
    field(ONST, "Hole")
}

# LFSR bypass.
# % autosave 2 
#% archiver 10 Monitor
record(mbbo, "$(P)$(R)LfsrBypass")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/lfsr_bypass")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "Off")
    field(ONST, "On")
    field(PINI, "1")
}

# LFSR bypass.
# has to be in control of that.
record(mbbi, "$(P)$(R)LfsrBypass_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/lfsr_bypass")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(ZRST, "Off")
    field(ONST, "On")
}

# Convert a DAC number to a name string
# by writing the number to DACNUMBER and reading
# the string back from DACNAME.
record(ao, "$(P)$(R)DacNumber")
{
    field(VAL, "0")
    field(FLNK, "$(P)$(R)DacNameCalc1") 
}
record(calcout, "$(P)$(R)DacNameCalc1")
{
    field(INPA, "$(P)$(R)DacNumber")
    field(CALC, "(A>=0)&&(A<=9)")
    field(OCAL, "A+1")
    field(OUT, "$(P)$(R)DacNameSel1.SELN PP")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
    field(FLNK, "$(P)$(R)DacNameCalc2")
}
record(calcout, "$(P)$(R)DacNameCalc2")
{
    field(INPA, "$(P)$(R)DacNumber")
    field(CALC, "(A>=10)&&(A<=19)")
    field(OCAL, "A-9")
    field(OUT, "$(P)$(R)DacNameSel2.SELN PP")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
    field(FLNK, "$(P)$(R)DacNameCalc3")
}
record(calcout, "$(P)$(R)DacNameCalc3")
{
    field(INPA, "$(P)$(R)DacNumber")
    field(CALC, "(A>=20)&&(A<=29)")
    field(OCAL, "A-19")
    field(OUT, "$(P)$(R)DacNameSel3.SELN PP")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
}
#record(sseq, "$(P)$(R)DacNameSel1")
#{
#    field(SELM, "Specified")
#    field(STR1, "None")
#    field(STR2, "Threshd 0")
#    field(STR3, "Threshd 1")
#    field(STR4, "Threshd 2")
#    field(STR5, "Threshd 3")
#    field(STR6, "Threshd 4")
#    field(STR7, "Threshd 5")
#    field(STR8, "Threshd 6")
#    field(STR9, "Threshd 7")
#    field(STRA, "Preamp")
#    field(LNK1, "$(P)$(R)DacName PP")
#    field(LNK2, "$(P)$(R)DacName PP")
#    field(LNK3, "$(P)$(R)DacName PP")
#    field(LNK4, "$(P)$(R)DacName PP")
#    field(LNK5, "$(P)$(R)DacName PP")
#    field(LNK6, "$(P)$(R)DacName PP")
#    field(LNK7, "$(P)$(R)DacName PP")
#    field(LNK8, "$(P)$(R)DacName PP")
#    field(LNK9, "$(P)$(R)DacName PP")
#    field(LNKA, "$(P)$(R)DacName PP")
#}
#record(sseq, "$(P)$(R)DacNameSel2")
#{
#    field(SELM, "Specified")
#    field(STR1, "Ikrum")
#    field(STR2, "Shaper")
#    field(STR3, "Disc")
#    field(STR4, "Disc_LS")
#    field(STR5, "ThreshdN")
#    field(STR6, "DAC_pixel")
#    field(STR7, "Delay")
#    field(STR8, "TP_BuffIn")
#    field(STR9, "TP_BuffOut")
#    field(STRA, "RPZ")
#    field(LNK1, "$(P)$(R)DacName PP")
#    field(LNK2, "$(P)$(R)DacName PP")
#    field(LNK3, "$(P)$(R)DacName PP")
#    field(LNK4, "$(P)$(R)DacName PP")
#    field(LNK5, "$(P)$(R)DacName PP")
#    field(LNK6, "$(P)$(R)DacName PP")
#    field(LNK7, "$(P)$(R)DacName PP")
#    field(LNK8, "$(P)$(R)DacName PP")
#    field(LNK9, "$(P)$(R)DacName PP")
#    field(LNKA, "$(P)$(R)DacName PP")
#}
#record(sseq, "$(P)$(R)DacNameSel3")
#{
#    field(SELM, "Specified")
#    field(STR1, "GND")
#    field(STR2, "TP_REF")
#    field(STR3, "FBK")
#    field(STR4, "Cas")
#    field(STR5, "TP_REFA")
#    field(STR6, "TP_REFB")
#    field(STR7, "BandgapQ")
#    field(STR8, "BandgapT")
#    field(STR9, "DacBias")
#    field(STRA, "DacCcBias")
#    field(LNK1, "$(P)$(R)DacName PP")
#    field(LNK2, "$(P)$(R)DacName PP")
#    field(LNK3, "$(P)$(R)DacName PP")
#    field(LNK4, "$(P)$(R)DacName PP")
#    field(LNK5, "$(P)$(R)DacName PP")
#    field(LNK6, "$(P)$(R)DacName PP")
#    field(LNK7, "$(P)$(R)DacName PP")
#    field(LNK8, "$(P)$(R)DacName PP")
#    field(LNK9, "$(P)$(R)DacName PP")
#    field(LNKA, "$(P)$(R)DacName PP")
#}
record(stringout, "$(P)$(R)DacName")
{
    field(VAL, "")
}

# DAC scan DAC selection.
# % autosave 2 
#% archiver 10 Monitor
record(longout, "$(P)$(R)ScanDac")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_config/scan_dac_num")
    field(PINI, "1")
}

# DAC scan DAC selection.
record(longin, "$(P)$(R)ScanDac_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_config/scan_dac_num")
}

# DAC scan start value.
# % autosave 2 
#% archiver 10 Monitor
record(longout, "$(P)$(R)ScanStart")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_config/scan_dac_start")
    field(PINI, "1")
}

# DAC scan start value.
record(longin, "$(P)$(R)ScanStart_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_config/scan_dac_start")
}

# DAC scan stop value.
# % autosave 2 
#% archiver 10 Monitor
record(longout, "$(P)$(R)ScanStop")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_config/scan_dac_stop")
    field(PINI, "1")
}

# DAC scan stop value.
record(longin, "$(P)$(R)ScanStop_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_config/scan_dac_stop")
}

# DAC scan step value.
# % autosave 2
#% archiver 10 Monitor
record(longout, "$(P)$(R)ScanStep")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_config/scan_dac_step")
    field(PINI, "1")
}

# DAC scan step value.
record(longin, "$(P)$(R)ScanStep_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_config/scan_dac_step")
}

# Burst mode frame unload period in seconds.
# % autosave 2
#% archiver 10 Monitor
#record(ao, "$(P)$(R)BurstSubmitPeriod")
#{
#    field(SCAN, "Passive")
#    field(DTYP, "asynFloat64")
#    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))BURST_SUBMIT_PERIOD")
#    field(PINI, "1")
#    field(EGU,  "s")
#    field(PREC, "3")
#}

# Burst mode frame unload period in seconds.
#record(ai, "$(P)$(R)BurstSubmitPeriod_RBV")
#{
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynFloat64")
#    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))BURST_SUBMIT_PERIOD")
#    field(EGU,  "s")
#    field(PREC, "3")
#}

# Extra trigger mode added to AD standard PV
record(mbbo, "$(P)$(R)TriggerMode")
{
   field(TWST, "Sync")
   field(TWVL, "2")
   field(DTYP, "asynInt32")
   field(SCAN, "Passive")
   field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/trigger_mode")
}
record(mbbi, "$(P)$(R)TriggerMode_RBV")
{
   field(TWST, "Sync")
   field(TWVL, "2")
   field(DTYP, "asynInt32")
   field(SCAN, "I/O Intr")
   field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/trigger_mode")
}

# Development mode FEM initialise command
# Process to execute
#record(longout, "$(P)$(R)InitialiseFem")
#{
#	field(DTYP, "asynInt32")
#	field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))INIT_FEM")
#}

# DAC initialise file name
# %autosave 2
#record(waveform, "$(P)$(R)DacIniFilename")
#{
#    field(PINI, "YES")
#    field(DTYP, "asynOctetWrite")
#    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))DAC_INI_FILE_NAME")
#    field(FTVL, "CHAR")
#    field(NELM, "256")
#}
#record(waveform, "$(P)$(R)DacIniFilename_RBV")
#{
#    field(DTYP, "asynOctetRead")
#    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))DAC_INI_FILE_NAME")
#    field(FTVL, "CHAR")
#    field(NELM, "256")
#    field(SCAN, "I/O Intr")
#}

# Load DAC initialisation file
#record(longout, "$(P)$(R)LoadDacFile")
#{
#    field(SCAN, "Passive")
#    field(DTYP, "asynInt32")
#    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))LOAD_DAC_FILE")
#    field(PINI, "1")
#}

# Control of test pulses.
# % autosave 2
#% archiver 10 Monitor
record(bo, "$(P)$(R)TestPulseEnable")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/test_pulse_enable")
    field(PINI, "1")
    field(ZNAM, "Off")
    field(ONAM, "On")
}
record(bi, "$(P)$(R)TestPulseEnable_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/test_pulse_enable")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

##########################################
# Calibration file status
# Read back of calibrating status
record(bi, "$(P)$(R)Calibrating_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_status/calibrating")
    field(ZNAM, "Idle")
    field(ONAM, "Calibrating")
}



# Control of calibration file loading.
# % autosave 2
#% archiver 10 Monitor
#record(bo, "$(P)$(R)AutoLoadCalFiles")
#{
#    field(SCAN, "Passive")
#    field(DTYP, "asynInt32")
#    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))AUTO_LOAD_CAL_FILES")
#    field(PINI, "1")
#    field(ZNAM, "Off")
#    field(ONAM, "On")
#}
#record(bi, "$(P)$(R)AutoLoadCalFiles_RBV")
#{
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynInt32")
#    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))AUTO_LOAD_CAL_FILES")
#    field(ZNAM, "Off")
#    field(ONAM, "On")
#}

# Some calibration is loaded.  This is set if any calibration file was loaded.
#record(longin, "$(P)$(R)SomeCalLoaded_RBV")
#{
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynInt32")
#    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))SOME_CAL_LOADED")
#}

# DAC calibration file loaded.
#record(longin, "$(P)$(R)AutoLoadedDacs_RBV")
#{
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynInt32")
#    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))AUTO_LOADED_DACS")
#}

# Threshold 0 file loaded.
#record(longin, "$(P)$(R)AutoLoadedThreshold0_RBV")
#{
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynInt32")
#    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))AUTO_LOADED_THRESHOLD0")
#}

# Threshold 1 file loaded.
#record(longin, "$(P)$(R)AutoLoadedThreshold1_RBV")
#{
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynInt32")
#    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))AUTO_LOADED_THRESHOLD1")
#}

# Calibration file root
# %autosave 2
record(waveform, "$(P)$(R)CalFileRoot")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODS_config/cal_file_root")
    field(FTVL, "CHAR")
    field(NELM, "256")
}
record(waveform, "$(P)$(R)CalFileRoot_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODS_config/cal_file_root")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}


###################################################################
#  Calculate if we need to re-load settings, these will be        #
#  processed if the connection to Odin transitions from           #
#  disconnected to reconnected                                    # 
###################################################################
record(calcout, "$(P)$(R)CalcReconnected")
{
    field(INPA, "$(P)$(R)DetectorState_RBV CP")
    field(CALC, "A=9?0:1")
    field(OUT, "$(P)$(R)ReconnectFan1.PROC PP")
    field(OOPT, "Transition To Non-zero")
}

record(fanout, "$(P)$(R)ReconnectFan1")
{
    field(LNK1, "$(P)$(R)UdpConfigFile.PROC PP")
    field(LNK2, "$(P)$(R)ImageMode.PROC PP")
    field(LNK3, "$(P)$(R)TriggerMode.PROC PP")
    field(LNK4, "$(P)$(R)AcquireTime.PROC PP")
    field(LNK5, "$(P)$(R)AcquirePeriod.PROC PP")
    field(LNK6, "$(P)$(R)NumImages.PROC PP")
    field(FLNK, "$(P)$(R)ReconnectFan2.PROC PP")
}

record(fanout, "$(P)$(R)ReconnectFan2")
{
    field(LNK1, "$(P)$(R)OperationMode.PROC PP")
    field(LNK2, "$(P)$(R)CounterDepth.PROC PP")
    field(LNK3, "$(P)$(R)CounterSelect.PROC PP")
    field(LNK4, "$(P)$(R)NumTestPulses.PROC PP")
    field(LNK5, "$(P)$(R)EnergyThreshold.PROC PP")
    field(LNK6, "$(P)$(R)ReadWriteMode.PROC PP")
    field(FLNK, "$(P)$(R)ReconnectFan3.PROC PP")
}

record(fanout, "$(P)$(R)ReconnectFan3")
{
    field(LNK1, "$(P)$(R)DiscCsmSpm.PROC PP")
    field(LNK2, "$(P)$(R)EqualizationMode.PROC PP")
    field(LNK3, "$(P)$(R)CsmSpmMode.PROC PP")
    field(LNK4, "$(P)$(R)GainMode.PROC PP")
    field(LNK5, "$(P)$(R)TriggerPolarity.PROC PP")
    field(LNK6, "$(P)$(R)LfsrBypass.PROC PP")
    field(FLNK, "$(P)$(R)ReconnectFan4.PROC PP")
}

record(fanout, "$(P)$(R)ReconnectFan4")
{
    field(LNK1, "$(P)$(R)CalFileRoot.PROC PP")
    field(LNK2, "$(P)$(R)NumTestPulses.PROC PP")
    field(LNK3, "$(P)$(R)ManualDacConfigFile.PROC PP")
    field(LNK4, "$(P)$(R)TestMaskConfigFile.PROC PP")
    field(LNK5, "$(P)$(R)TestPulseEnable.PROC PP")
    field(LNK6, "$(P)$(R)BIAS_LEVEL.PROC PP")
}

###################################################################
#  UDP farm mode setup configuration file                         # 
###################################################################
# %autosave 2
record(waveform, "$(P)$(R)UdpConfigFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODS_config/udp_file")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

###################################################################
#  Override the acquisition mode                                  # 
###################################################################
record(mbbo, "$(P)$(R)ImageMode")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/image_mode")
   field(TWST, "")
}

record(mbbi, "$(P)$(R)ImageMode_RBV")
{
   field(SCAN, "I/O Intr")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODE_config/image_mode")
   field(TWST, "")
}

###################################################################
#  Send a manual test DAC configuration                           # 
###################################################################
# %autosave 2
record(waveform, "$(P)$(R)ManualDacConfigFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODS_config/test_dac_file")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(P)$(R)ManualDacConfigFile_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODS_config/test_dac_file")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(longout, "$(P)$(R)LoadDacFile")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_command/configure_dac")
}

###################################################################
#  Send a test mask configuration                                 # 
###################################################################
# %autosave 2
record(waveform, "$(P)$(R)TestMaskConfigFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODS_config/test_mask_file")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(waveform, "$(P)$(R)TestMaskConfigFile_RBV")
{
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),0,$(TIMEOUT))_ODS_config/test_mask_file")
    field(FTVL, "CHAR")
    field(NELM, "256")
}

record(longout, "$(P)$(R)LoadTestMaskFile")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_command/configure_mask")
}

###################################################################
#  Manual force calibration                                       # 
###################################################################
record(longout, "$(P)$(R)ManualLoadCalibration")
{
    field(SCAN, "Passive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0,$(TIMEOUT))_ODI_command/force_calibrate")
}

###################################################################
#  Set the Live View Endpoint                                     #
###################################################################
record(stringout, "$(P)$(R)LiveViewEndpoint")
{
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ODIN_DETECTOR_LV")
    field(VAL,  "")
}

record(stringin, "$(P)$(R)LiveViewEndpoint_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ODIN_DETECTOR_LV")
    field(VAL,  "")
    field(SCAN, "I/O Intr")
}
