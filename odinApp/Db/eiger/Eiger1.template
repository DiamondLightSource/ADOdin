# Database for the records specific to the Eiger1X
# Gary Yendell
# 1/8/19

# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout
#% macro, ADDR, Asyn Port address
#% macro, API, Excalibur API version

# This associates the template with an edm screen
# % gui, $(PORT), edmtab, EigerDetector.edl, P=$(P),R=$(R)

include "EigerBase.template"

# FileWriter clear all files
record(ao, "$(P)$(R)FWClear") {
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))CLEAR")
    field(DESC, "Clear files in the detector")
}

# FileWriter free buffer space
record(ai, "$(P)$(R)FWFree_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))FW_FREE")
    field(DESC, "Free disk space")
    field(EGU,  "GB")
    field(PREC, "3")
    field(ASLO, "9.5367431640625e-07")
    field(SCAN, "I/O Intr")
}

# FileWriter State
record(stringin, "$(P)$(R)FWState_RBV") {
    field(DESC, "FileWriter operational state")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))FW_STATE")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)CountCutoff_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODI_detector/api/$(API)/config/ccc_cutoff")
    field(DESC, "Rate Correct Cutoff")
    field(EGU,  "count")
    field(SCAN, "I/O Intr")
}

# Dead time between frames
record(ai, "$(P)$(R)DeadTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/detector_readout_time")
    field(DESC, "Dead time")
    field(EGU,  "s")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}

# Monitor State
record(stringin, "$(P)$(R)MonitorState_RBV") {
    field(DESC, "Monitor operational state")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))MONITOR_STATE")
    field(SCAN, "I/O Intr")
}

# Eiger Error Parameters

record(bi, "$(P)$(R)Link0_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_detector/api/$(API)/status/link_0")
    field(ZNAM, "down")
    field(ONAM, "up")
    field(SCAN, "I/O Intr")
}

record(bi, "$(P)$(R)Link1_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_detector/api/$(API)/status/link_1")
    field(ZNAM, "down")
    field(ONAM, "up")
    field(SCAN, "I/O Intr")
}

record(bi, "$(P)$(R)Link2_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_detector/api/$(API)/status/link_2")
    field(ZNAM, "down")
    field(ONAM, "up")
    field(SCAN, "I/O Intr")
}

record(bi, "$(P)$(R)Link3_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_detector/api/$(API)/status/link_3")
    field(ZNAM, "down")
    field(ONAM, "up")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)DCUBufferFree_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/status/builder/dcu_buffer_free")
    field(EGU,  "%")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "1")
}
