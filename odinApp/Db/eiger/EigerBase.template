# Database for the records specific to the Eiger driver
# Bruno Martins
# June 2, 2015

# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout
#% macro, ADDR, Asyn Port address
#% macro, API, Excalibur API version

# This associates the template with an edm screen
# % gui, $(PORT), edmtab, EigerMain.edl, P=$(P),R=$(R)

include "ADBase.template"


###################################################################
#  Set the Live View Endpoint                                     #
###################################################################
record(stringout, "$(P)$(R)LiveViewEndpoint")
{
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ODIN_DETECTOR_LV")
    field(VAL,  "")
}

record(stringin, "$(P)$(R)LiveViewEndpoint_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ODIN_DETECTOR_LV")
    field(VAL,  "")
    field(SCAN, "I/O Intr")
}

record(ao,"$(P)$(R)AcquireTime") {
    field(VAL, "1")
}

#% archiver 1 monitor
record(ai, "$(P)$(R)AcquireTime_RBV") {
}

record(ao,"$(P)$(R)AcquirePeriod") {
    field(VAL, "1")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/frame_time")
}

record(ai,"$(P)$(R)AcquirePeriod_RBV") {
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/frame_time")
}

record(stringin, "$(P)$(R)SerialNumber_RBV") {
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODS_detector/api/$(API)/config/detector_number")
}

# We redefine the states for the TriggerMode records defined in ADBase.template
record(mbbo,"$(P)$(R)TriggerMode") {
    field(DESC,"Acquire mode")
    field(ZRVL,"0")
    field(ZRST,"Internal Series")
    field(ONVL,"2")
    field(ONST,"Internal Enable")
    field(TWVL,"1")
    field(TWST,"External Series")
    field(THVL,"3")
    field(THST,"External Enable")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_detector/api/$(API)/config/trigger_mode")
}

record(mbbi,"$(P)$(R)TriggerMode_RBV") {
    field(DESC,"Acquire mode")
    field(ZRVL,"0")
    field(ZRST,"Internal Series")
    field(ONVL,"2")
    field(ONST,"Internal Enable")
    field(TWVL,"1")
    field(TWST,"External Series")
    field(THVL,"3")
    field(THST,"External Enable")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_detector/api/$(API)/config/trigger_mode")
}

record(longin, "$(P)$(R)BitDepthImage_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODI_detector/api/$(API)/config/bit_depth_image")
    field(DESC, "Image bit depth")
    field(VAL,  "0")
    field(SCAN, "I/O Intr")
}


# Number of Triggers
record(longout, "$(P)$(R)NumTriggers") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODI_detector/api/$(API)/config/ntrigger")
    field(DESC, "Number of triggers per acquisition")
}

record(longin, "$(P)$(R)NumTriggers_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODI_detector/api/$(API)/config/ntrigger")
    field(DESC, "Number of triggers per acquisition")
    field(VAL,  "1")
    field(SCAN, "I/O Intr")
}

# Manual trigger
record(bo,"$(P)$(R)ManualTrigger") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODB_config/manual_trigger")
    field(DESC, "Disable auto triggering")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi,"$(P)$(R)ManualTrigger_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODB_config/manual_trigger")
    field(DESC, "Disable auto triggering")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# Exposure for triggers on INTE mode
record(ao, "$(P)$(R)TriggerExposure")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_config/trigger_exposure")
    field(DESC, "Trigger Exposure for INTE mode")
    field(EGU,  "s")
    field(PREC, "6")
}

record(ai, "$(P)$(R)TriggerExposure_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_config/trigger_exposure")
    field(DESC, "Trigger Exposure for INTE mode")
    field(EGU,  "s")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}

# Trigger the detector
record(longout, "$(P)$(R)Trigger") {
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODI_command/send_trigger")
    field(DESC, "Trigger the detector")
}

# FileWriter API enable
record(bo,"$(P)$(R)FWEnable") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_filewriter/api/$(API)/config/mode")
    field(DESC, "Enable usage of FileWriter API")
    field(VAL,  "1")
    field(ZNAM, "Yes")
    field(ONAM, "No")
}

record(bi,"$(P)$(R)FWEnable_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_filewriter/api/$(API)/config/mode")
    field(DESC, "Enable usage of FileWriter API")
    field(ZNAM, "Yes")
    field(ONAM, "No")
    field(SCAN, "I/O Intr")
}

# FileWriter compression enabled
record(bo,"$(P)$(R)FWCompression") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODB_filewriter/api/$(API)/config/compression_enabled")
    field(VAL,  "1")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
}

record(bi,"$(P)$(R)FWCompression_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODB_filewriter/api/$(API)/config/compression_enabled")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)SensorThickness_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/sensor_thickness")
    field(DESC, "Sensor Thickness")
    field(EGU,  "m")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}

record(stringin, "$(P)$(R)SensorMaterial_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODS_detector/api/$(API)/config/sensor_material")
    field(DESC, "Sensor Material")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)XPixelSize_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/x_pixel_size")
    field(DESC, "X Pixel Size")
    field(EGU,  "m")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)YPixelSize_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/y_pixel_size")
    field(DESC, "Y Pixel Size")
    field(EGU,  "m")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}

# ROI Mode
record(mbbo,"$(P)$(R)ROIMode") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_detector/api/$(API)/config/roi_mode")
    field(DESC, "ROI Mode")
    field(VAL,  "0")
    field(ZRST, "Disabled")
    field(ZRVL, "0")
    field(ONST, "4M")
    field(ONVL, "1")
}

record(mbbi,"$(P)$(R)ROIMode_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_detector/api/$(API)/config/roi_mode")
    field(DESC, "ROI Mode")
    field(VAL,  "0")
    field(ZRST, "Disabled")
    field(ZRVL, "0")
    field(ONST, "4M")
    field(ONVL, "1")
    field(SCAN, "I/O Intr")
}

# Compression algorithm selection
record(mbbo,"$(P)$(R)CompressionAlgo") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_detector/api/$(API)/config/compression")
    field(DESC, "Compression Algorithm")
    field(VAL,  "0")
    field(ZRST, "lz4")
    field(ZRVL, "0")
    field(ONST, "bslz4")
    field(ONVL, "1")
}

record(mbbi,"$(P)$(R)CompressionAlgo_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_detector/api/$(API)/config/compression")
    field(DESC, "Compression Algorithm")
    field(VAL,  "0")
    field(ZRST, "lz4")
    field(ZRVL, "0")
    field(ONST, "bslz4")
    field(ONVL, "1")
    field(SCAN, "I/O Intr")
}

# Stream API enable
record(bo,"$(P)$(R)StreamEnable") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_stream/api/$(API)/config/mode")
    field(DESC, "Enable usage of Stream API")
    field(VAL,  "0")
    field(ZNAM, "Yes")
    field(ONAM, "No")
}

record(bi,"$(P)$(R)StreamEnable_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_stream/api/$(API)/config/mode")
    field(DESC, "Enable usage of Stream API")
    field(ZNAM, "Yes")
    field(ONAM, "No")
    field(SCAN, "I/O Intr")
}

# Stream number of dropped frames
#% archiver 1 Monitor
record(longin, "$(P)$(R)StreamDropped_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODI_stream/api/$(API)/status/dropped")
    field(DESC, "Number of dropped frames")
    field(SCAN, "I/O Intr")
}

# Stream State
record(stringin, "$(P)$(R)StreamState_RBV") {
    field(DESC, "Stream operational state")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))STREAM_STATE")
    field(SCAN, "I/O Intr")
}

# Stream Header Detail Selection
record(mbbo,"$(P)$(R)StreamHdrDetail") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_stream/api/$(API)/config/header_detail")
    field(DESC, "Stream Header Detail")
    field(VAL,  "0")
    field(ZRST, "All")
    field(ZRVL, "0")
    field(ONST, "Basic")
    field(ONVL, "1")
    field(TWST, "None")
    field(TWVL, "2")
}

record(mbbi,"$(P)$(R)StreamHdrDetail_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_stream/api/$(API)/config/header_detail")
    field(DESC, "Stream Header Detail")
    field(VAL,  "0")
    field(ZRST, "All")
    field(ZRVL, "0")
    field(ONST, "Basic")
    field(ONVL, "1")
    field(TWST, "None")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

# Stream Header Appendix
record(waveform, "$(P)$(R)StreamHdrAppendix")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EIG_SCS_header_appendix")
    field(FTVL, "CHAR")
    field(NELM, "1024")
    info(autosaveFields, "VAL")
}

# Stream Image Appendix
record(waveform, "$(P)$(R)StreamImgAppendix")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))EIG_SCS_image_appendix")
    field(FTVL, "CHAR")
    field(NELM, "1024")
    info(autosaveFields, "VAL")
}

# Save files locally
record(bo,"$(P)$(R)SaveFiles") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SAVE_FILES")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi,"$(P)$(R)SaveFiles_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SAVE_FILES")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# Saved files owner
record(stringout, "$(P)$(R)FileOwner") {
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))FILE_OWNER")
    field(VAL,  "")
}

record(stringin, "$(P)$(R)FileOwner_RBV") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))FILE_OWNER")
    field(SCAN, "I/O Intr")
}

# Saved files owner group
record(stringout, "$(P)$(R)FileOwnerGrp") {
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))FILE_OWNER_GROUP")
    field(VAL,  "")
}

record(stringin, "$(P)$(R)FileOwnerGrp_RBV") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))FILE_OWNER_GROUP")
    field(SCAN, "I/O Intr")
}

# Saved files permissions
record(ao,"$(P)$(R)FilePerms") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))FILE_PERMISSIONS")
    field(VAL,  "0644")
}

# Flatfield correction applied
record(bo,"$(P)$(R)FlatfieldApplied") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODB_detector/api/$(API)/config/flatfield_correction_applied")
    field(VAL,  "1")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
}

record(bi,"$(P)$(R)FlatfieldApplied_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODB_detector/api/$(API)/config/flatfield_correction_applied")
    field(ZNAM, "Disabled")
    field(ONAM, "Enabled")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)SequenceId")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODI_status/sequence_id")
    field(DESC, "Image sequence number")
    field(SCAN, "I/O Intr")
}


# Threshold energy
record(ao, "$(P)$(R)PhotonEnergy")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/photon_energy")
    field(DESC, "Photon energy")
    field(EGU,  "eV")
    field(PREC, "3")
}

#% archiver 1 Monitor
record(ai, "$(P)$(R)PhotonEnergy_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/photon_energy")
    field(DESC, "Photon energy")
    field(EGU,  "eV")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

# Armed flag, which indicates Eiger is ready for triggers
record(bi, "$(P)$(R)Armed")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODB_status/armed")
    field(ZNAM, "Unarmed")
    field(ONAM, "Armed")
    field(SCAN, "I/O Intr")
}

# Threshold energy
record(ao, "$(P)$(R)ThresholdEnergy")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/threshold_energy")
    field(DESC, "Energy threshold")
    field(EGU,  "eV")
    field(PREC, "3")
}

record(ai, "$(P)$(R)ThresholdEnergy_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/threshold_energy")
    field(DESC, "Energy threshold")
    field(EGU,  "eV")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

# Wavelength
record(ao, "$(P)$(R)Wavelength")
{
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/wavelength")
    field(PREC, "4")
    field(EGU,  "Angstroms")
}

record(ai, "$(P)$(R)Wavelength_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/wavelength")
    field(PREC, "4")
    field(EGU,  "Angstroms")
    field(SCAN, "I/O Intr")
}

# ancillary information

record(ao, "$(P)$(R)DetDist")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/detector_distance")
    field(PREC, "3")
    field(EGU,  "m")
}

record(ao, "$(P)$(R)BeamX")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/beam_center_x")
    field(PREC, "3")
    field(EGU,  "pixels")
}

record(ao, "$(P)$(R)BeamY")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/beam_center_y")
    field(PREC, "3")
    field(EGU,  "pixels")
}

record(ai, "$(P)$(R)DetDist_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/detector_distance")
    field(PREC, "3")
    field(EGU,  "m")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)BeamX_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/beam_center_x")
    field(PREC, "3")
    field(EGU,  "pixels")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)BeamY_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/beam_center_y")
    field(PREC, "3")
    field(EGU,  "pixels")
    field(SCAN, "I/O Intr")
}

# MX Parameters

record(ao, "$(P)$(R)ChiStart")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/chi_start")
    field(PREC, "3")
    field(EGU,  "deg")
}

record(ai, "$(P)$(R)ChiStart_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/chi_start")
    field(PREC, "3")
    field(EGU,  "deg")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)ChiIncr")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/chi_increment")
    field(PREC, "3")
    field(EGU,  "deg")
}

record(ai, "$(P)$(R)ChiIncr_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/chi_increment")
    field(PREC, "3")
    field(EGU,  "deg")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)KappaStart")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/kappa_start")
    field(PREC, "3")
    field(EGU,  "deg")
}

record(ai, "$(P)$(R)KappaStart_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/kappa_start")
    field(PREC, "3")
    field(EGU,  "deg")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)KappaIncr")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/kappa_increment")
    field(PREC, "3")
    field(EGU,  "deg")
}

record(ai, "$(P)$(R)KappaIncr_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/kappa_increment")
    field(PREC, "3")
    field(EGU,  "deg")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)OmegaStart")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/omega_start")
    field(PREC, "3")
    field(EGU,  "deg")
}

record(ai, "$(P)$(R)OmegaStart_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/omega_start")
    field(PREC, "3")
    field(EGU,  "deg")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)OmegaIncr")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/omega_increment")
    field(PREC, "3")
    field(EGU,  "deg")
}

record(ai, "$(P)$(R)OmegaIncr_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/omega_increment")
    field(PREC, "3")
    field(EGU,  "deg")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)PhiStart")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/phi_start")
    field(PREC, "3")
    field(EGU,  "deg")
}

record(ai, "$(P)$(R)PhiStart_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/phi_start")
    field(PREC, "3")
    field(EGU,  "deg")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)PhiIncr")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/phi_increment")
    field(PREC, "3")
    field(EGU,  "deg")
}

record(ai, "$(P)$(R)PhiIncr_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/phi_increment")
    field(PREC, "3")
    field(EGU,  "deg")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)TwoThetaStart")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/two_theta_start")
    field(PREC, "3")
    field(EGU,  "deg")
}

record(ai, "$(P)$(R)TwoThetaStart_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/two_theta_start")
    field(PREC, "3")
    field(EGU,  "deg")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)TwoThetaIncr")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/two_theta_increment")
    field(PREC, "3")
    field(EGU,  "deg")
}

record(ai, "$(P)$(R)TwoThetaIncr_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/config/two_theta_increment")
    field(PREC, "3")
    field(EGU,  "deg")
    field(SCAN, "I/O Intr")
}

# Monitor API enable
record(bo,"$(P)$(R)MonitorEnable") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_monitor/api/$(API)/config/mode")
    field(DESC, "Enable usage of Monitor API")
    field(ZNAM, "Yes")
    field(ONAM, "No")
}

record(bi,"$(P)$(R)MonitorEnable_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODE_monitor/api/$(API)/config/mode")
    field(DESC, "Enable usage of Monitor API")
    field(ZNAM, "Yes")
    field(ONAM, "No")
    field(SCAN, "I/O Intr")
}

# Monitor API enable
record(bo,"$(P)$(R)LiveViewEnable") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODB_config/live_view")
    field(DESC, "Enable live view updates")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi,"$(P)$(R)LiveViewEnable_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODB_config/live_view")
    field(DESC, "Enable live view updates")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# Override ADCore firmware version record
record(stringin, "$(P)$(R)FirmwareVersion_RBV") {
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODS_detector/api/$(API)/config/software_version")
    field(SCAN, "I/O Intr")
}


# Set DISA for PVs in ADBase that do not apply to Eiger

record(mbbo, "$(P)$(R)DataType")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)DataType_RBV")
{
    field(DISA, "1")
}
record(mbbo, "$(P)$(R)ColorMode")
{
    field(DISA, "1")
}
record(mbbi, "$(P)$(R)ColorMode_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)BinX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)BinX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)BinY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)BinY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)MinX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)MinX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)MinY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)MinY_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)SizeX")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)SizeX_RBV")
{
    field(DISA, "1")
}
record(longout, "$(P)$(R)SizeY")
{
    field(DISA, "1")
}
record(longin, "$(P)$(R)SizeY_RBV")
{
    field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseX")
{
    field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseX_RBV")
{
    field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseY")
{
    field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseY_RBV")
{
    field(DISA, "1")
}

record(busy, "$(P)$(R)Initialize") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODB_command/initialize")
   field(ZNAM, "Done")
   field(ONAM, "Initialize")
}

# Eiger State
record(stringin, "$(P)$(R)State_RBV") {
    field(DESC, "Operational state")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODS_detector/api/$(API)/status/state")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)Temp0_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/status/board_000/th0_temp")
    field(EGU,  "C")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "1")
}

record(ai, "$(P)$(R)Humid0_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODD_detector/api/$(API)/status/board_000/th0_humidity")
    field(EGU,  "%")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PREC, "1")
}

record(stringin, "$(P)$(R)Error_RBV") {
    field(DESC, "Parameters causing error state")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODS_detector/api/$(API)/status/error")
    field(SCAN, "I/O Intr")
}

record(stringin, "$(P)$(R)Description_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))_ODS_detector/api/$(API)/config/description")
    field(DESC, "Detector Description")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)ReadStatus")
{
    field(SCAN, ".1 second")
}
